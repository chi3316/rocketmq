name: PUSH-CI

on:
  push:
    branches: [master, develop]
  #schedule:
  #  - cron: "0 18 * * *" # TimeZone: UTC 0

concurrency:
  group: rocketmq-${{ github.ref }}

env:
  MAVEN_OPTS: -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120
  DOCKER_REPO: apache/rocketmq-ci
  SECRET: $(echo "${{ secrets.ASK_CONFIG_VIRGINA }}" | base64 -w 0)

jobs:
  dist-tar:
    if: github.repository == 'apache/rocketmq'
    name: Build dist tar
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "8"
          cache: "maven"
      - name: Build distribution tar
        run: |
          mvn -Prelease-all -DskipTests -Dspotbugs.skip=true clean install -U
      - uses: actions/upload-artifact@v4
        name: Upload distribution tar
        with:
          name: rocketmq
          path: distribution/target/rocketmq*/rocketmq*

  docker:
    if: ${{ success() }}
    name: Docker images
    needs: [dist-tar]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        base-image: ["ubuntu"]
        java-version: ["8"]
    steps:
      - uses: actions/checkout@v3
        with:
          repository: apache/rocketmq-docker.git
          ref: master
          path: rocketmq-docker
      - uses: actions/download-artifact@v4
        name: Download distribution tar
        with:
          name: rocketmq
          path: rocketmq
      - name: docker-login
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and save docker images
        id: build-images
        run: |
          cd rocketmq-docker/image-build-ci
          version=${{ github.event.pull_request.number || github.ref_name }}-$(uuidgen)
          mkdir versionlist
          touch versionlist/"${version}-`echo ${{ matrix.base-image }} | sed -e "s/:/-/g"`"
          sh ./build-image-local.sh ${version} ${{ matrix.base-image }} ${{ matrix.java-version }} ${DOCKER_REPO}
      - uses: actions/upload-artifact@v4
        name: Upload distribution tar
        with:
          name: versionlist
          path: rocketmq-docker/image-build-ci/versionlist/*

  list-version:
    if: >
      github.repository == 'apache/rocketmq' && 
      always()
    name: List version
    needs: [docker]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      version-json: ${{ steps.show_versions.outputs.version-json }}
    steps:
      - uses: actions/download-artifact@v4
        name: Download versionlist
        with:
          name: versionlist
          path: versionlist
      - name: Show versions
        id: show_versions
        run: | 
          a=(`ls versionlist`)
          printf '%s\n' "${a[@]}" | jq -R . | jq -s .
          echo version-json=`printf '%s\n' "${a[@]}" | jq -R . | jq -s .` >> $GITHUB_OUTPUT

  deploy:
    if: ${{ success() }}
    name: Deploy RocketMQ
    needs: [list-version,docker]
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      matrix:
        version: ${{ fromJSON(needs.list-version.outputs.version-json) }}
        test-type: [e2e, benchmark]
    steps:
      - run: echo "Running ${{ matrix.test-type }}... "
      - uses: apache/rocketmq-test-tool@7d84d276ad7755b1dc5cf9657a7a9bff6ae6d288
        name: Deploy rocketmq
        with:
          action: "deploy"
          ask-config: "${{ env.SECRET }}"
          test-version: "${{ matrix.version }}"
          chart-git: "https://ghproxy.com/https://github.com/apache/rocketmq-docker.git"
          chart-branch: "master"
          chart-path: "./rocketmq-k8s-helm"
          job-id: ${{ strategy.job-index }}
          helm-values: |
            nameserver:
              image:
                repository: ${{env.DOCKER_REPO}}
                tag: ${{ matrix.version }}
            broker:
              image:
                repository: ${{env.DOCKER_REPO}}
                tag: ${{ matrix.version }}
            proxy:
              image:
                repository: ${{env.DOCKER_REPO}}
                tag: ${{ matrix.version }}



  benchmark-test:
    if: ${{ success() }}
    runs-on: ubuntu-latest
    name: Performance benchmark test
    needs: [ list-version, deploy ]
    timeout-minutes: 60
    steps:
      - uses: chi3316/rocketmq-test-tool/benchmark-runner@89d3abde74cac994f9a9b3c45bf6ed3096cdc7ea
        name: Performance benchmark
        with:
          action: "performance-benchmark"
          ask-config: "${{ env.SECRET }}"
          job-id: 1
          test-time: "600"
      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-report
          path: benchmark/

  clean:
    if: always()
    name: Clean
    needs: [list-version, test-e2e-grpc-java, test-e2e-golang, test-e2e-remoting-java]
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      matrix:
        version: ${{ fromJSON(needs.list-version.outputs.version-json) }}
        test-type: [ e2e, benchmark ]
    steps:
      - run: echo "Cleaning ${{ matrix.test-type }}... "
      - uses: apache/rocketmq-test-tool@7d84d276ad7755b1dc5cf9657a7a9bff6ae6d288
        name: clean
        with:
          action: "clean"
          ask-config: "${{ env.SECRET }}"
          test-version: "${{ matrix.version }}"
          job-id: ${{ strategy.job-index }}
          
